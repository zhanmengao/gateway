// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: global/gw.proto

package global

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NETWORK_TYPE int32

const (
	NETWORK_INIT NETWORK_TYPE = 0
	NETWORK_WS   NETWORK_TYPE = 1
	NETWORK_HTTP NETWORK_TYPE = 2
	NETWORK_UDP  NETWORK_TYPE = 3
)

var NETWORK_TYPE_name = map[int32]string{
	0: "NETWORK_INIT",
	1: "NETWORK_WS",
	2: "NETWORK_HTTP",
	3: "NETWORK_UDP",
}

var NETWORK_TYPE_value = map[string]int32{
	"NETWORK_INIT": 0,
	"NETWORK_WS":   1,
	"NETWORK_HTTP": 2,
	"NETWORK_UDP":  3,
}

func (NETWORK_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22e8c59bab186b66, []int{0}
}

type DBUrl struct {
	Service              string       `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	URI                  string       `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
	Type                 NETWORK_TYPE `protobuf:"varint,3,opt,name=Type,proto3,enum=github.zhanmengao.gateway.global.NETWORK_TYPE" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DBUrl) Reset()         { *m = DBUrl{} }
func (m *DBUrl) String() string { return proto.CompactTextString(m) }
func (*DBUrl) ProtoMessage()    {}
func (*DBUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_22e8c59bab186b66, []int{0}
}
func (m *DBUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBUrl.Merge(m, src)
}
func (m *DBUrl) XXX_Size() int {
	return m.Size()
}
func (m *DBUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_DBUrl.DiscardUnknown(m)
}

var xxx_messageInfo_DBUrl proto.InternalMessageInfo

func (m *DBUrl) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *DBUrl) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *DBUrl) GetType() NETWORK_TYPE {
	if m != nil {
		return m.Type
	}
	return NETWORK_INIT
}

func init() {
	proto.RegisterEnum("github.zhanmengao.gateway.global.NETWORK_TYPE", NETWORK_TYPE_name, NETWORK_TYPE_value)
	proto.RegisterType((*DBUrl)(nil), "github.zhanmengao.gateway.global.DBUrl")
}

func init() { proto.RegisterFile("global/gw.proto", fileDescriptor_22e8c59bab186b66) }

var fileDescriptor_22e8c59bab186b66 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xcf, 0xc9, 0x4f,
	0x4a, 0xcc, 0xd1, 0x4f, 0x2f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x48, 0xcf, 0x2c,
	0xc9, 0x28, 0x4d, 0xd2, 0xab, 0xca, 0x48, 0xcc, 0xcb, 0x4d, 0xcd, 0x4b, 0x4f, 0xcc, 0xd7, 0x4b,
	0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x83, 0x28, 0x55, 0x2a, 0xe7, 0x62, 0x75, 0x71, 0x0a,
	0x2d, 0xca, 0x11, 0x92, 0xe0, 0x62, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x85, 0x04, 0xb8, 0x98, 0x43, 0x83, 0x3c, 0x25, 0x98, 0xc0,
	0xa2, 0x20, 0xa6, 0x90, 0x13, 0x17, 0x4b, 0x48, 0x65, 0x41, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06,
	0x9f, 0x91, 0x9e, 0x1e, 0x21, 0x5b, 0xf4, 0xfc, 0x5c, 0x43, 0xc2, 0xfd, 0x83, 0xbc, 0xe3, 0x43,
	0x22, 0x03, 0x5c, 0x83, 0xc0, 0x7a, 0xb5, 0x82, 0xb9, 0x78, 0x90, 0x45, 0x85, 0x04, 0x10, 0x7c,
	0x4f, 0x3f, 0xcf, 0x10, 0x01, 0x06, 0x21, 0x3e, 0x2e, 0x2e, 0x98, 0x48, 0x78, 0xb0, 0x00, 0x23,
	0xb2, 0x0a, 0x8f, 0x90, 0x90, 0x00, 0x01, 0x26, 0x21, 0x7e, 0x2e, 0x6e, 0x98, 0x48, 0xa8, 0x4b,
	0x80, 0x00, 0xb3, 0x93, 0xdd, 0x85, 0x87, 0x72, 0x0c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x46, 0xa9,
	0x40, 0xdd, 0x98, 0x9c, 0x9f, 0xab, 0x8f, 0x70, 0xa7, 0x3e, 0xd4, 0x9d, 0xfa, 0x10, 0x77, 0x26,
	0xb1, 0x81, 0x83, 0xcd, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x26, 0x67, 0xee, 0x51, 0x49, 0x01,
	0x00, 0x00,
}

func (x NETWORK_TYPE) String() string {
	s, ok := NETWORK_TYPE_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *DBUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintGw(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintGw(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintGw(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGw(dAtA []byte, offset int, v uint64) int {
	offset -= sovGw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DBUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovGw(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovGw(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGw(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGw(x uint64) (n int) {
	return sovGw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NETWORK_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGw = fmt.Errorf("proto: unexpected end of group")
)
